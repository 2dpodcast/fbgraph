/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['graph.js']) {
  _$jscoverage['graph.js'] = [];
  _$jscoverage['graph.js'][5] = 0;
  _$jscoverage['graph.js'][15] = 0;
  _$jscoverage['graph.js'][22] = 0;
  _$jscoverage['graph.js'][30] = 0;
  _$jscoverage['graph.js'][31] = 0;
  _$jscoverage['graph.js'][33] = 0;
  _$jscoverage['graph.js'][34] = 0;
  _$jscoverage['graph.js'][35] = 0;
  _$jscoverage['graph.js'][36] = 0;
  _$jscoverage['graph.js'][38] = 0;
  _$jscoverage['graph.js'][41] = 0;
  _$jscoverage['graph.js'][48] = 0;
  _$jscoverage['graph.js'][49] = 0;
  _$jscoverage['graph.js'][56] = 0;
  _$jscoverage['graph.js'][57] = 0;
  _$jscoverage['graph.js'][58] = 0;
  _$jscoverage['graph.js'][59] = 0;
  _$jscoverage['graph.js'][61] = 0;
  _$jscoverage['graph.js'][67] = 0;
  _$jscoverage['graph.js'][75] = 0;
  _$jscoverage['graph.js'][76] = 0;
  _$jscoverage['graph.js'][78] = 0;
  _$jscoverage['graph.js'][79] = 0;
  _$jscoverage['graph.js'][80] = 0;
  _$jscoverage['graph.js'][84] = 0;
  _$jscoverage['graph.js'][96] = 0;
  _$jscoverage['graph.js'][97] = 0;
}
_$jscoverage['graph.js'][5]++;
var https = require("https"), util = require("util"), EventEmitter = require("events").EventEmitter, noop = (function () {
});
_$jscoverage['graph.js'][15]++;
exports.version = "0.1.0";
_$jscoverage['graph.js'][22]++;
exports.graphUrl = "graph.facebook.com";
_$jscoverage['graph.js'][30]++;
function Request(method, url, fn) {
  _$jscoverage['graph.js'][31]++;
  EventEmitter.call(this);
  _$jscoverage['graph.js'][33]++;
  this.callback = fn || noop;
  _$jscoverage['graph.js'][34]++;
  this.body = "";
  _$jscoverage['graph.js'][35]++;
  this.options = {host: exports.graphUrl, path: url};
  _$jscoverage['graph.js'][36]++;
  this[method.toLowerCase()]();
  _$jscoverage['graph.js'][38]++;
  return this;
}
_$jscoverage['graph.js'][41]++;
util.inherits(Request, EventEmitter);
_$jscoverage['graph.js'][48]++;
Request.prototype.write = (function (data) {
  _$jscoverage['graph.js'][49]++;
  this.body += data;
});
_$jscoverage['graph.js'][56]++;
Request.prototype.end = (function () {
  _$jscoverage['graph.js'][57]++;
  var json;
  _$jscoverage['graph.js'][58]++;
  try {
    _$jscoverage['graph.js'][59]++;
    json = JSON.parse(this.body);
  }
  catch (e) {
    _$jscoverage['graph.js'][61]++;
    json = {error: "Error parsing json", excetpion: e};
  }
  _$jscoverage['graph.js'][67]++;
  this.callback(json);
});
_$jscoverage['graph.js'][75]++;
Request.prototype.get = (function () {
  _$jscoverage['graph.js'][76]++;
  var self = this;
  _$jscoverage['graph.js'][78]++;
  https.get(this.options, (function (res) {
  _$jscoverage['graph.js'][79]++;
  util.pump(res, self, (function () {
  _$jscoverage['graph.js'][80]++;
  self.end();
}));
})).on("error", (function (err) {
  _$jscoverage['graph.js'][84]++;
  self.callback({error: "Error processing https request", exception: err});
}));
});
_$jscoverage['graph.js'][96]++;
exports.get = (function (url, fn) {
  _$jscoverage['graph.js'][97]++;
  var req = new Request("GET", url, fn);
});
_$jscoverage['graph.js'].source = ["/**"," * Module Dependencies"," */","","var https        = require('https')","  , util         = require('util')","  , EventEmitter = require('events').EventEmitter","  , noop         = function(){};","","","/**"," * Library version"," */","","exports.version = '0.1.0';","","","/**"," * Graph api url"," */","","exports.graphUrl = 'graph.facebook.com';","","/**"," * Request Stream"," *"," * @param {String} method"," * @param {String} url"," */","function Request(method, url, fn) {","  EventEmitter.call(this);","","  this.callback = fn || noop;","  this.body    = '';","  this.options = { host: exports.graphUrl , path: url };","  this[method.toLowerCase()]();","","  return this;","}","","util.inherits(Request, EventEmitter);","","/**"," *"," * @param {Mixed} data"," */","","Request.prototype.write = function (data) {","  this.body += data;","};","","/**"," *"," */","","Request.prototype.end = function () {","  var json;","  try {","    json = JSON.parse(this.body); ","  } catch (e) {","    json = {","      error: 'Error parsing json',","      excetpion: e","    }; ","  }","","  this.callback(json);","};","","","/**"," *"," */","","Request.prototype.get = function() {","  var self = this;","","  https.get(this.options, function(res) {","    util.pump(res, self, function() {","      self.end();","    });","","  }).on('error', function (err) {","    self.callback({","      error: 'Error processing https request',","      exception: err","    });","  });","};","","","/**"," *"," */","","exports.get = function(url, fn) {","  var req = new Request('GET', url, fn);","};"];
