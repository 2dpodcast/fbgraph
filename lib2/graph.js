/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['graph.js']) {
  _$jscoverage['graph.js'] = [];
  _$jscoverage['graph.js'][5] = 0;
  _$jscoverage['graph.js'][15] = 0;
  _$jscoverage['graph.js'][23] = 0;
  _$jscoverage['graph.js'][33] = 0;
  _$jscoverage['graph.js'][34] = 0;
  _$jscoverage['graph.js'][36] = 0;
  _$jscoverage['graph.js'][37] = 0;
  _$jscoverage['graph.js'][38] = 0;
  _$jscoverage['graph.js'][40] = 0;
  _$jscoverage['graph.js'][41] = 0;
  _$jscoverage['graph.js'][43] = 0;
  _$jscoverage['graph.js'][46] = 0;
  _$jscoverage['graph.js'][52] = 0;
  _$jscoverage['graph.js'][54] = 0;
  _$jscoverage['graph.js'][57] = 0;
  _$jscoverage['graph.js'][58] = 0;
  _$jscoverage['graph.js'][59] = 0;
  _$jscoverage['graph.js'][62] = 0;
  _$jscoverage['graph.js'][70] = 0;
  _$jscoverage['graph.js'][71] = 0;
  _$jscoverage['graph.js'][78] = 0;
  _$jscoverage['graph.js'][79] = 0;
  _$jscoverage['graph.js'][82] = 0;
  _$jscoverage['graph.js'][83] = 0;
  _$jscoverage['graph.js'][84] = 0;
  _$jscoverage['graph.js'][86] = 0;
  _$jscoverage['graph.js'][93] = 0;
  _$jscoverage['graph.js'][100] = 0;
  _$jscoverage['graph.js'][101] = 0;
  _$jscoverage['graph.js'][103] = 0;
  _$jscoverage['graph.js'][105] = 0;
  _$jscoverage['graph.js'][106] = 0;
  _$jscoverage['graph.js'][109] = 0;
  _$jscoverage['graph.js'][110] = 0;
  _$jscoverage['graph.js'][111] = 0;
  _$jscoverage['graph.js'][116] = 0;
  _$jscoverage['graph.js'][121] = 0;
  _$jscoverage['graph.js'][134] = 0;
  _$jscoverage['graph.js'][135] = 0;
  _$jscoverage['graph.js'][136] = 0;
  _$jscoverage['graph.js'][141] = 0;
  _$jscoverage['graph.js'][148] = 0;
  _$jscoverage['graph.js'][149] = 0;
  _$jscoverage['graph.js'][150] = 0;
  _$jscoverage['graph.js'][151] = 0;
  _$jscoverage['graph.js'][158] = 0;
  _$jscoverage['graph.js'][159] = 0;
  _$jscoverage['graph.js'][160] = 0;
  _$jscoverage['graph.js'][163] = 0;
  _$jscoverage['graph.js'][171] = 0;
  _$jscoverage['graph.js'][172] = 0;
  _$jscoverage['graph.js'][179] = 0;
  _$jscoverage['graph.js'][180] = 0;
  _$jscoverage['graph.js'][188] = 0;
  _$jscoverage['graph.js'][189] = 0;
  _$jscoverage['graph.js'][196] = 0;
  _$jscoverage['graph.js'][197] = 0;
}
_$jscoverage['graph.js'][5]++;
var https = require("https"), querystring = require("querystring"), util = require("util"), EventEmitter = require("events").EventEmitter, noop = (function () {
});
_$jscoverage['graph.js'][15]++;
var accessToken = null, graphUrl = "graph.facebook.com";
_$jscoverage['graph.js'][23]++;
exports.version = "0.1.0";
_$jscoverage['graph.js'][33]++;
function Graph(method, url, fn) {
  _$jscoverage['graph.js'][34]++;
  EventEmitter.call(this);
  _$jscoverage['graph.js'][36]++;
  url = this.cleanUrl(url);
  _$jscoverage['graph.js'][37]++;
  this.callback = fn || noop;
  _$jscoverage['graph.js'][38]++;
  this.body = "";
  _$jscoverage['graph.js'][40]++;
  this.options = {host: graphUrl, path: url};
  _$jscoverage['graph.js'][41]++;
  this[method.toLowerCase()]();
  _$jscoverage['graph.js'][43]++;
  return this;
}
_$jscoverage['graph.js'][46]++;
util.inherits(Graph, EventEmitter);
_$jscoverage['graph.js'][52]++;
Graph.prototype.cleanUrl = (function (url) {
  _$jscoverage['graph.js'][54]++;
  if (url.charAt(0) !== "/") {
    _$jscoverage['graph.js'][54]++;
    url = "/" + url;
  }
  _$jscoverage['graph.js'][57]++;
  if (accessToken) {
    _$jscoverage['graph.js'][58]++;
    url += url.indexOf("?") !== -1? "&": "?";
    _$jscoverage['graph.js'][59]++;
    url += querystring.stringify(accessToken);
  }
  _$jscoverage['graph.js'][62]++;
  return url;
});
_$jscoverage['graph.js'][70]++;
Graph.prototype.write = (function (data) {
  _$jscoverage['graph.js'][71]++;
  this.body += data;
});
_$jscoverage['graph.js'][78]++;
Graph.prototype.end = (function (imageData) {
  _$jscoverage['graph.js'][79]++;
  var json = imageData || null, err = null;
  _$jscoverage['graph.js'][82]++;
  if (! json) {
    _$jscoverage['graph.js'][83]++;
    try {
      _$jscoverage['graph.js'][84]++;
      json = JSON.parse(this.body);
    }
    catch (e) {
      _$jscoverage['graph.js'][86]++;
      err = {error: "Error parsing json", excetpion: e};
    }
  }
  _$jscoverage['graph.js'][93]++;
  this.callback(err, json);
});
_$jscoverage['graph.js'][100]++;
Graph.prototype.get = (function () {
  _$jscoverage['graph.js'][101]++;
  var self = this;
  _$jscoverage['graph.js'][103]++;
  https.get(this.options, (function (res) {
  _$jscoverage['graph.js'][105]++;
  res.on("data", (function (data) {
  _$jscoverage['graph.js'][106]++;
  self.write(data);
}));
  _$jscoverage['graph.js'][109]++;
  res.on("end", (function () {
  _$jscoverage['graph.js'][110]++;
  if (res.headers["content-type"].indexOf("image") !== -1) {
    _$jscoverage['graph.js'][111]++;
    self.end({image: true, location: res.headers.location});
  }
  else {
    _$jscoverage['graph.js'][116]++;
    self.end();
  }
}));
})).on("error", (function (err) {
  _$jscoverage['graph.js'][121]++;
  self.callback({error: "Error processing https request", exception: err}, null);
}));
});
_$jscoverage['graph.js'][134]++;
exports.get = (function (url, fn) {
  _$jscoverage['graph.js'][135]++;
  if (typeof url !== "string") {
    _$jscoverage['graph.js'][136]++;
    return fn({error: "Graph api url must be a string"}, null);
  }
  _$jscoverage['graph.js'][141]++;
  return new Graph("GET", url, fn);
});
_$jscoverage['graph.js'][148]++;
exports.search = (function (options, fn) {
  _$jscoverage['graph.js'][149]++;
  options = options || {};
  _$jscoverage['graph.js'][150]++;
  var url = "/search?" + querystring.stringify(options);
  _$jscoverage['graph.js'][151]++;
  return new Graph("GET", url, fn);
});
_$jscoverage['graph.js'][158]++;
exports.authorizeUrl = (function (opts) {
  _$jscoverage['graph.js'][159]++;
  if (! opts) {
    _$jscoverage['graph.js'][160]++;
    throw new Error("AuthorizeUrl Must have a redirectUri");
  }
  _$jscoverage['graph.js'][163]++;
  return "https://www.facebook.com/dialog/oauth?" + querystring.stringify(opts);
});
_$jscoverage['graph.js'][171]++;
exports.setAccessToken = (function (token) {
  _$jscoverage['graph.js'][172]++;
  accessToken = {access_token: token};
});
_$jscoverage['graph.js'][179]++;
exports.getAccessToken = (function () {
  _$jscoverage['graph.js'][180]++;
  return accessToken.access_token;
});
_$jscoverage['graph.js'][188]++;
exports.setGraphUrl = (function (url) {
  _$jscoverage['graph.js'][189]++;
  graphUrl = url;
});
_$jscoverage['graph.js'][196]++;
exports.getGraphUrl = (function () {
  _$jscoverage['graph.js'][197]++;
  return graphUrl;
});
_$jscoverage['graph.js'].source = ["/**"," * Module Dependencies"," */","","var https        = require('https')","  , querystring  = require('querystring')","  , util         = require('util')","  , EventEmitter = require('events').EventEmitter","  , noop         = function(){};","","/**"," * @private"," */","","var accessToken = null","  , graphUrl    = 'graph.facebook.com';","","","/**"," * Library version"," */","","exports.version = '0.1.0';","","","","/**"," * Graph Stream"," *"," * @param {String} method"," * @param {String} url"," */","function Graph(method, url, fn) {","  EventEmitter.call(this);","","  url           = this.cleanUrl(url);","  this.callback = fn || noop;","  this.body     = '';","  // this.options  = { host: exports.graphUrl , path: url };","  this.options  = { host: graphUrl , path: url };","  this[method.toLowerCase()]();","","  return this;","}","","util.inherits(Graph, EventEmitter);","","/**"," *"," */","","Graph.prototype.cleanUrl = function(url) {","  // add leading slash","  if (url.charAt(0) !== '/') url = '/' + url;","","  // add access token to url","  if (accessToken) {","    url += url.indexOf('?') !== -1 ? '&amp;' : '?';","    url += querystring.stringify(accessToken);","  }","","  return url;","};","","/**"," *"," * @param {Mixed} data"," */","","Graph.prototype.write = function (data) {","  this.body += data;","};","","/**"," * @param {object} imageData"," */","","Graph.prototype.end = function (imageData) {","  var json = imageData || null","    , err  = null;","","  if (!json) {","    try {","      json = JSON.parse(this.body); ","    } catch (e) {","      err = {","          error: 'Error parsing json'","        , excetpion: e","      }; ","    }","  }","","  this.callback(err, json);","};","","/**"," *"," */","","Graph.prototype.get = function() {","  var self = this;","","  https.get(this.options, function(res) {","","    res.on('data', function (data) {","      self.write(data);","    });","","    res.on('end', function () {","      if (res.headers['content-type'].indexOf('image') !== -1 ) {","        self.end({","            image: true","          , location: res.headers.location","        });","      } else {","        self.end();","      }","    });","","  }).on('error', function (err) {","    self.callback({","        error: 'Error processing https request'","      , exception: err","    }, null);","  });","","};","","","/**"," *"," */","","exports.get = function(url, fn) {","  if (typeof url !== 'string') {","    return fn({","            error: 'Graph api url must be a string'","          }, null);","  }","  ","  return new Graph('GET', url, fn);","};","","/**"," *"," */","","exports.search = function (options, fn) {","  options = options || {};","  var url = '/search?' + querystring.stringify(options);","  return new Graph('GET', url, fn);","};","","/**"," *"," */","","exports.authorizeUrl = function (opts) {","  if (!opts) {","    throw new Error('AuthorizeUrl Must have a redirectUri');","  }","","  return  'https://www.facebook.com/dialog/oauth?' ","            + querystring.stringify(opts);","};","","/**"," *"," */","","exports.setAccessToken = function(token) {","  accessToken = { access_token: token };","};","","/**"," *"," */","","exports.getAccessToken = function () {","  return accessToken.access_token;","};","","","/**"," *"," */","","exports.setGraphUrl = function (url) {","  graphUrl = url;","};","","/**"," *"," */","","exports.getGraphUrl = function() {","  return graphUrl;","};","","","","// /**","//  *","//  */","// ","// exports.setAccessToken = function(config, code, fn) {","//   var callback = fn || exports.noop;","//   ","//   var oAuth = new OAuth(","//       config.appId","//     , config.secret","//     , 'https://' + exports.graphUrl","//   );","// ","//   oAuth.getOAuthAccessToken(code, { ","//     redirect_uri: config.callback ","//   }, callback);","// };"];
